on:
  workflow_dispatch:
    inputs:
      dotnet-version:
        required: false
        default: "8.0.x"
        description: "The .NET version to setup for the build"
        type: string
      dotnet-target:
        required: false
        default: "net8.0"
        description: "The .NET target framework to build the projects with"
        type: string
      release:
        required: false
        default: "false"
        description: "Create GitHub release (true/false)"
        type: string
permissions:
  contents: write
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4
        with:
          path: main_repo
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ inputs.dotnet-version }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ inputs.dotnet-version }}-

      - name: Restore Dependencies and Build Main Repo
        run: dotnet build main_repo --configuration Release --framework ${{ inputs.dotnet-target }}

      - name: Extract Version and ABI from csproj
        id: extract_version_abi
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)(.*)(?=</Version>)" main_repo/**/*.csproj | sed 's/^[^:]*://')
          TARGET_ABI=$(grep -oPm1 "(?<=<PackageReference Include=\"Jellyfin.Controller\" Version=\")(.*)(?=\")" main_repo/**/*.csproj | sed 's/^[^:]*://')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "TARGET_ABI=${TARGET_ABI}" >> $GITHUB_ENV

      - name: Generate ZIP for DLLs
        run: |
          find main_repo -path '*/bin/Release/*.dll' -exec zip -j myanimelist_${{ env.VERSION }}.zip {} +

      - name: Generate MD5 Checksum for ZIP
        id: checksum
        run: |
          CHECKSUM=$(md5sum myanimelist_${{ env.VERSION }}.zip | awk '{ print $1 }')
          echo "CHECKSUM=${CHECKSUM}" >> $GITHUB_ENV

      - name: Update Manifest File
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          jq --arg version "${{ env.VERSION }}" \
             --arg changelog "https://github.com/ryandash/jellyfin-myanimelist-sync/releases/tag/v${{ env.VERSION }}" \
             --arg checksum "${{ env.CHECKSUM }}" \
             --arg sourceUrl "https://github.com/ryandash/jellyfin-myanimelist-sync/releases/download/v${{ env.VERSION }}/myanimelist_${{ env.VERSION }}.zip" \
             --arg targetAbi "${{ env.TARGET_ABI }}" \
             --arg timestamp "$TIMESTAMP" \
             '.[0].versions = [{
                changelog: $changelog,
                checksum: $checksum,
                sourceUrl: $sourceUrl,
                targetAbi: $targetAbi,
                timestamp: $timestamp,
                version: $version
              }] + .[0].versions' main_repo/manifest.json > main_repo/manifest-updated.json

          mv main_repo/manifest-updated.json main_repo/manifest.json

      - name: Get Changelog
        id: changelog
        run: |
          cd main_repo
          git fetch --tags
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, including all commits..."
            git log --pretty=format:"%h %B" --no-merges > CHANGELOG.txt
          else
            echo "Using last tag: $LAST_TAG"
            git log ${LAST_TAG}..HEAD --pretty=format:"%h %B" --no-merges > CHANGELOG.txt
          fi
          CHANGELOG_CONTENT=$(cat CHANGELOG.txt)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ inputs.release == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          name: "Version ${{ env.VERSION }}"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          artifacts: "myanimelist_${{ env.VERSION }}.zip"
          artifactContentType: "application/zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit Manifest to Main
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update manifest"
          branch: master
          file_pattern: 'manifest.json CHANGELOG.txt'
          repository: main_repo
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
          commit_author: "ryandash <ryandash@users.noreply.github.com>"
          skip_dirty_check: true
